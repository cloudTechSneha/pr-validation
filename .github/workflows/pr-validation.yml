name: PR Validation (Maven + JaCoCo)

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: my-app  # your Maven module folder

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      # 3. Build, Test & Generate Coverage
      - name: Build, Test & Coverage
        run: mvn -B clean test jacoco:report

      # 4. Apply Spotless formatting
      - name: Spotless Apply
        run: mvn spotless:apply

      # 5. Check code formatting
      - name: Spotless Check
        run: mvn spotless:check

      # 6. Run Checkstyle
      - name: Run Checkstyle
        run: mvn checkstyle:check

      # 7. Extract JaCoCo coverage %
      - name: Extract Coverage
        id: coverage
        run: |
          XML="target/site/jacoco/jacoco.xml"
          if [ ! -f "$XML" ]; then
            echo "coverage=0.0" >> $GITHUB_OUTPUT
          else
            COV=$(grep -m1 '<counter type="LINE"' $XML | sed -E 's/.*missed="([0-9]+)".*covered="([0-9]+)".*/\1 \2/' | awk '{total=$1+$2; if(total==0){print 0}else{print ($2*100/total)}}')
            echo "coverage=$COV" >> $GITHUB_OUTPUT
          fi

      # 8. Post Coverage & Test Results as PR Comment
      - name: Post Coverage to PR
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}                        # Your GitHub PAT
          issue-number: ${{ github.event.pull_request.number }}  # Target PR number
          body: |
            ### ‚úÖ Build & Test Passed
            üìä Line coverage: **${{ steps.coverage.outputs.coverage }}%**

      # 9. Validate PR description for JIRA ID
      - name: Check PR Description for JIRA
        run: |
          if echo "${{ github.event.pull_request.body }}" | grep -Eq 'JIRA-[0-9]+'; then
            echo "‚úÖ JIRA ID found in PR description"
          else
            echo "‚ùå Missing JIRA ID in PR description"
            exit 1

      # 10. Validate PR Labels
      - name: Check PR Labels
        run: |
          LABELS="${{ toJson(github.event.pull_request.labels) }}"
          if [ "$LABELS" = "[]" ]; then
            echo "‚ùå No labels found on PR"
            exit 1
          else
            echo "‚úÖ Labels present"
